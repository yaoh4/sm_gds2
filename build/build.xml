<?xml version="1.0"?>

<project xmlns:jacoco="antlib:org.jacoco.ant" name="gds" default="all" basedir="..">
<!-- ANT build.xml.
     Tag               			   Description
     clean       		           Deletes all relevant dirs
     make_deployment_dirs	       Creates all relevant deployment dirs
     compile			           Compiles the java source code
     copy_properties_files         Copy configuration files into conf.dir
     javadoc                       Creates java documentation
     war                           Creates war archive
     tomcat.deploy                 Deploy war file into tomcat container
     tomcat.undeploy               Undeploy application from tomcat container

 -->
	 <tstamp>
          <format property="start.timestamp" pattern="dd-MMM-yy HH:mm:ss"/>
     </tstamp>
     <echo message="Build started: ${start.timestamp}"></echo>
	
 <!-- Defined Environment & property files -->
 
     <property environment="env"/>          
     <property file="${basedir}/build/user.properties"/>    
	 <property file="${basedir}/build/env.properties"/>

<!-- Define project deployment properties -->    
    
    <property name="app.name"               value="gds"/>
    <property name="package.root"           value="gov"/>   
	<property name="distribution.dir"       value="./distribution" />
	<property name="webcontent.dir"		    value="./WebContent" />
	<property name="properties.dir"		    value="./properties" />
	<property name="test.classes.dir"       value="./bin"/>
	<property name="doc.dir"				value="./docs" />
	<property name="javadoc.dir"            value="./docs/javadoc" />
	<property name="web.inf.dir"            value="${webcontent.dir}/WEB-INF" />
	<property name="web.jsp.dir"            value="${webcontent.dir}/jsp" />
	<property name="global.lib.dir"			value="./lib" />
	<property name="lib.dir"				value="${web.inf.dir}/lib" />
	<property name="src.dir"                value="./src" />
	<property name="test.dir"                value="./test" />
	<property name="build.dir"              value="./build" />
	<property name="build.war.dir"          value="./build/war" />
	<property name="web.inf.dir"			value="${webcontent.dir}/WEB-INF" />
	<property name="java.classes.dir"		value="${web.inf.dir}/classes" />
	
    <property name="app.war.dir"            value="${build.war.dir}/${app.name}"/>
    <property name="app.war.inf"            value="${app.war.dir}/WEB-INF"/>
    <property name="app.war.includes"       value="${app.war.dir}/includes"/>
    <property name="app.war.images"         value="${app.war.dir}/images"/>
	
    <property name="app.distribution.dir"   value="${distribution.dir}/${app.name}"/>
    <property name="app.name.war"           value="${app.name}.war"/>
	<property name="env.properties.dir"  	value="${properties.dir}/${common.env}"/>
    <property name="common.properties.dir"  value="${properties.dir}"/>
   
	<property name="result.dir"  			value="./target"/>
	<property name="result.classes.dir"  	value="${result.dir}/classes"/>
	<property name="result.report.dir"  	value="${result.dir}/site/jacoco"/>
	<property name="result.exec.file"  		value="${result.dir}/jacoco.exec"/>

   
	
	<echo message="************************************************************"></echo>
    <echo message="Build started: ${start.timestamp}"></echo>
    <echo message="Building application for   '${common.env}' Environment"></echo>
    <echo message="************************************************************"></echo>
     
    
<!-- Define the project Classpath Settings -->
    <path id="project.classpath">
        <pathelement path="${classpath}"/>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${global.lib.dir}" includes="tomcat/*.jar"/>
    </path>
    <property name="project.classpath" refid="project.classpath"/>
	
    <taskdef resource="org/apache/catalina/ant/catalina.tasks" classpathref="project.classpath" />
	
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${global.lib.dir}/tomcat/jacocoant.jar"/>
	</taskdef>
		
    <!-- Create deployment dirs make_deployment_dirs -->
    <target name="make_deployment_dirs" description="create deployment dirs" depends="clean" >
        <mkdir dir="${java.classes.dir}"/>
    	<mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${doc.dir}"/>
        <mkdir dir="${javadoc.dir}"/>
        <mkdir dir="${distribution.dir}"/>
        <mkdir dir="${app.distribution.dir}"/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.war.dir}"/>
        <mkdir dir="${conf.dir}/${app.name}"/>
        <mkdir dir="${app.war.inf}"/>
        <mkdir dir="${app.war.includes}"/>
        <mkdir dir="${app.war.images}"/>
    </target>
    
<!-- remove deployment dirs before deoplyment -->
<target name="clean" description="remove deployment dirs before deploymemt">
    <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${java.classes.dir}" includes="**/*"/>
    </delete>
    <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${javadoc.dir}" includes="**/*"/>
    </delete>
    <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${distribution.dir}" includes="**/*"/>
    </delete>
    <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${build.war.dir}" includes="**/*"/>
    </delete>    
    <delete includeEmptyDirs="true" failonerror="false">
         <fileset dir="${conf.dir}/${app.name}" includes="**/*"/>
    </delete>
    <delete includeEmptyDirs="true" failonerror="false">
        <fileset dir="${test.classes.dir}" includes="**/*"/>
    </delete>
</target>


<!-- compile project source -->
<target name="compile" depends="make_deployment_dirs" 
        description="compiles the java source files" >
    <javac includeantruntime="false" debug="on"
        classpath="${project.classpath}" 
        srcdir="${src.dir}"
        destdir="${java.classes.dir}" />
    <javac includeantruntime="false" debug="on"
    	classpath="${project.classpath}:${java.classes.dir}"
        srcdir="${test.dir}"
        destdir="${test.classes.dir}" /> 
    <copy todir="${java.classes.dir}">
        <fileset dir="${src.dir}" excludes="**/*.java"/>
    </copy>
    <copy todir="${test.classes.dir}">
    	<fileset dir="${test.dir}" excludes="**/*.java"/>
    </copy>
              
              
</target>
	
	    	
<target name="findbugs" depends="compile"
	description="Reports code quaility" >
	<taskdef 
		name="findbugs" 
		classpath="${project.classpath}" 
		classname="edu.umd.cs.findbugs.anttask.FindBugsTask"/>
	<findbugs home="${findbugs.home}" failOnError="true"
		      output="html"
		      outputFile="findbugs-report.html" 
			  reportLevel="high"
			  warningsProperty="findbugsFailure">
		<auxClasspath path="${lib.dir}:${global.lib.dir}" />
		<sourcePath path="${src.dir}" />
		<class location="${java.classes.dir}" />
	</findbugs>
	
	<fail if="findbugsFailure"/>

</target>

	
 <target name="pmd">
 	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
 		    <classpath>
 		        <fileset dir="${pmd.home}">
 		            <include name="lib/*.jar"/>    
 		        </fileset>
 		    </classpath>
 	</taskdef>	
    <pmd>
	  <formatter type="html" toFile="pmd_report.html" />
    	<ruleset>rulesets/java/basic.xml</ruleset>
    	<ruleset>rulesets/java/imports.xml</ruleset>
    	<ruleset>rulesets/java/empty.xml</ruleset>
	  <fileset dir="${src.dir}">
	  	<include name="**/*.java"/>
	  </fileset>
 	</pmd>
</target> 
	
		 
<target name="cpd" description="Search for cut-and-pasted code">
	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
		<classpath>
			<fileset dir="${pmd.home}">
				<include name="lib/*.jar"/>    
			</fileset>
		</classpath>
	</taskdef>
	<property name="cpd.report.xml" location="cpd_report.xml" />
		  
	<cpd minimumTokenCount="${cpd.minimum.tokens}" format="xml"
		outputFile="cpd_report.xml" ignoreLiterals="${cpd.ignore.literals}"
		ignoreIdentifiers="${cpd.ignore.identifiers}">
		<fileset dir="${src.dir}" includes="**/*.java" />
	</cpd>
	
	<!--<xslt in="cpd_report.xml" style="${pmd.home}/cpdhtml.xslt" out="cpd_report.html"/>-->
		 
</target>
			

	
<!--  copy various proerties files to required directories -->
   
<target name="copy_properties_files" depends="make_deployment_dirs"
                description="copies properties files to deployment folders" >
      <!-- copy other properties to conf folder -->
     <echo message="copying property files from : ${common.properties.dir}" />    
	 
	 <copy todir="${conf.dir}/${app.name}">
            <fileset dir="${common.properties.dir}">
             <include name="db-connection.properties"/>
             <include name="application.properties"/>
            </fileset>
	 		<fileset dir="${env.properties.dir}">
	 	     <include name="${app.name}.properties"/>
	 	    </fileset>
     </copy>
     <copy todir="${java.classes.dir}">
            <fileset dir="${properties.dir}">
              <include name="*.*"/>
              <exclude name="db-connection.properties"/>
              <exclude name="application.properties"/>
            </fileset>
     		<fileset dir="${env.properties.dir}">
     		  <include name="log4j2.xml"/>
     		</fileset>
            <fileset dir="${webcontent.dir}" includes="template/*/*.*"/>
     </copy>

</target>    
<!-- creat javadoc from the java source files -->

<target name="javadoc" depends="make_deployment_dirs" >
    <javadoc classpath="${project.classpath}" 
             destdir="${javadoc.dir}" 
             sourcepath="${src.dir}"
             packagenames="${package.root}/*"/>
</target>

<!--  build the web archive -->
   
    <target name="war" depends="compile,copy_properties_files" description="create war file">
            

		<copy todir="${app.war.dir}">
            <fileset dir="${webcontent.dir}">
              <include name="**/*.*"/>
            </fileset>
        </copy>			
        		 
		
		<!-- create war file -->     
		
		<war destfile="${app.distribution.dir}/${app.name.war}" webxml="${app.war.inf}/web.xml">
            <fileset dir="${app.war.dir}">
               <exclude name="**/web.xml"/>
            </fileset>
            <classes dir="${java.classes.dir}"/>
            <lib dir="${lib.dir}" >
            	<exclude name="jasper-compiler.jar"/>
            	<exclude name="jasper-runtime.jar"/>
            	<exclude name="catalina-ant.jar"/>
            	<exclude name="ant-contrib-1.0b2.jar"/>
            	<exclude name="activation.jar"/>
            	<exclude name="mail.jar"/>
                <exclude name="tomcat/*.jar"/>
                <exclude name="tomcat"/>
            </lib>
        </war>
    </target>
	
	
	
  
   <target name="tomcat.undeploy">
      <undeploy url="${tomcat.url}" failonerror="false"
                    username="${tomcat.user}" password="${tomcat.password}"
                    path="/${app.name}"/>
   </target> 

   <target name="tomcat.deploy" depends="tomcat.undeploy, war" >
      <deploy url="${tomcat.url}" username="${tomcat.user}" 
              password="${tomcat.password}" path="/${app.name}" 
              war="${basedir}/${app.distribution.dir}/${app.name.war}"/>
   </target>  
   <!-- run ALL targets -->
   <target name="all" depends="clean,make_deployment_dirs,copy_properties_files, compile, findbugs, pmd, cpd, report, war, tomcat.deploy"/>
   <target name="junit" depends="compile, copy_properties_files">
	  <junit showoutput="true" printsummary="yes" haltonfailure="yes">
	    <sysproperty key="conf.dir" value="${conf.dir}"/>
		<classpath refid="project.classpath" />
		<classpath location="${java.classes.dir}" />
	   	<classpath location="${test.classes.dir}" />
	  	<test name="gov.nih.nci.cbiit.scimgmt.gds.actions.ManageSubmissionTest" haltonfailure="no" outfile="${distribution.dir}/result">		  		
	  		<formatter type="plain" />
	  		<formatter type="xml" />
	  	</test>
	  	<test name="gov.nih.nci.cbiit.scimgmt.gds.util.GdsPageStatusUtilTest" haltonfailure="no" outfile="${distribution.dir}/result">		  		
	  		<formatter type="plain" />
	  		<formatter type="xml" />
	  	</test>
	  </junit>
   </target>

	<target name="test" depends="compile, copy_properties_files">
		<jacoco:coverage destfile="${result.exec.file}">
			<junit showoutput="true" printsummary="yes" haltonfailure="no" fork="yes">
				<sysproperty key="conf.dir" value="${conf.dir}"/>
				<classpath refid="project.classpath" />
				<classpath location="${java.classes.dir}" />
				<classpath location="${test.classes.dir}" />
				<test name="gov.nih.nci.cbiit.scimgmt.gds.actions.ManageSubmissionTest">
					<formatter type="xml" />
				</test>
				<test name="gov.nih.nci.cbiit.scimgmt.gds.util.GdsPageStatusUtilTest">	
					<formatter type="xml" />
				</test>
			</junit>
		</jacoco:coverage>
	</target>

	<target name="report" depends="test">
		<jacoco:report>
			<executiondata>
				<file file="${result.exec.file}"/>
			</executiondata>

			<structure name="JaCoCo Ant GDS">
				<classfiles>
					<fileset dir="${java.classes.dir}" />
					<fileset dir="${test.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}"/>
				</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.dir}"/>
			<csv destfile="${result.report.dir}/report.csv"/>
			<xml destfile="${result.report.dir}/report.xml"/>
		</jacoco:report>
	</target>
</project>
