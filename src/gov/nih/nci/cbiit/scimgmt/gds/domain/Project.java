package gov.nih.nci.cbiit.scimgmt.gds.domain;
// Generated Mar 28, 2016 10:25:57 AM by Hibernate Tools 4.0.0

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.annotations.Formula;

import gov.nih.nci.cbiit.scimgmt.gds.constants.ApplicationConstants;


/**
 * Project generated by hbm2java
 */
@Entity
@Table(name = "PROJECTS_T")
public class Project implements java.io.Serializable {

	private Long id;
	private String projectIdentifierNum;
	private String docAbbreviation;
	private String programBranch;
	private Date sciRevApprovalRcvdDate;
	private String parentAccessionNum;
	private String comments;
	private String bsiComments;
	private String planComments;
	private Long bsiReviewedId;
	private Long versionNum;
	private String createdBy;
	private String lastChangedBy;
	private String subprojectFlag;
	private Long parentProjectId;
	private String latestVersionFlag;
	private Long projectGroupId;
	private Long submissionReasonId;
	private String certificationCompleteFlag;
	private Date anticipatedSubmissionDate;
	private String submissionTitle;
	private String subprojectEligibleFlag;
	private Date createdDate;
	private Date lastChangedDate;
	private Lookup dataSharingExcepStatus;
	
	private List<PageStatus> pageStatuses = new ArrayList();
	private Set<Document> documents = new HashSet(0);
	private Set<PlanAnswerSelection> planAnswerSelections = new HashSet(0);
	private List<RepositoryStatus> repositoryStatuses = new ArrayList<RepositoryStatus>(0);
	private List<InstitutionalCertification> institutionalCertifications = new ArrayList<InstitutionalCertification>();
	private List<ProjectGrantContract> projectGrantsContracts = new ArrayList<ProjectGrantContract>();


	
	
	private Long subprojectCount;
	private Long repoCount;
	private Project parent;
	private NedPerson createdByPerson;
	private NedPerson lastChangedByPerson;
	
	private String dataLinkFlag = "Y";
	

	public Project() {
	}

	public Project(Long id, String projectIdentifierNum, Long versionNum,
		 String createdBy) {
		this.id = id;
		this.projectIdentifierNum = projectIdentifierNum;
		this.versionNum = versionNum;
		this.createdBy = createdBy;
	}


	@Override
	public String toString() {
		return "Project [id=" + id + ", projectIdentifierNum=" + projectIdentifierNum
				+ ", docAbbreviation=" + docAbbreviation + ", programBranch=" + programBranch
				+ ", sciRevApprovalRcvdDate=" + sciRevApprovalRcvdDate
				+ ", parentAccessionNum=" + parentAccessionNum + ", comments=" + comments 
				+ ", bsiReviewedId=" + bsiReviewedId + ", versionNum=" + versionNum 
				+ ", createdBy=" + createdBy + ", lastChangedBy=" + lastChangedBy
				+ ", subprojectFlag=" + subprojectFlag + ", parentProjectId=" + parentProjectId
				+ ", latestVersionFlag=" + latestVersionFlag + ", projectGroupId=" + projectGroupId
				+ ", submissionReasonId=" + submissionReasonId
				+ ", certificationCompleteFlag=" + certificationCompleteFlag
				+ ", pageStatuses=" + pageStatuses + ", documents=" + documents 
				+ ", planAnswerSelections=" + planAnswerSelections
				+ ", repositoryStatuses=" + repositoryStatuses
				+ ", institutionalCertifications=" + institutionalCertifications  
				+ ", submissionTitle=" + submissionTitle + "]";
	}


	public Project(Long id, String projectIdentifierNum, String docAbbreviation,
			String programBranch, String applicationNum,
			Date sciRevApprovalRcvdDate,
			String parentAccessionNum, String comments, Long bsiReviewedId, Long versionNum,
			String createdBy, String lastChangedBy, String applClassCode, String subprojectFlag,
			Long parentProjectId, String latestVersionFlag, Long projectGroupId, Long subprojectGroupId,
			Long submissionReasonId, String certificationCompleteFlag,
			List pageStatuses, Set documents, String subprojectEligibleFlag, 
			Set planAnswerSelections, List repositoryStatuses, List institutionalCertifications,Long applId, String submissionTitle) {
		this.id = id;
		this.projectIdentifierNum = projectIdentifierNum;
		this.docAbbreviation = docAbbreviation;
		this.programBranch = programBranch;
		this.sciRevApprovalRcvdDate = sciRevApprovalRcvdDate;
		this.parentAccessionNum = parentAccessionNum;
		this.comments = comments;
		this.bsiReviewedId = bsiReviewedId;
		this.versionNum = versionNum;
		this.createdBy = createdBy;
		this.lastChangedBy = lastChangedBy;
		this.subprojectFlag = subprojectFlag;
		this.parentProjectId = parentProjectId;
		this.latestVersionFlag = latestVersionFlag;
		this.projectGroupId = projectGroupId;
		this.submissionReasonId = submissionReasonId;
		this.certificationCompleteFlag = certificationCompleteFlag;
		this.pageStatuses = pageStatuses;
		this.documents = documents;
		this.planAnswerSelections = planAnswerSelections;
		this.repositoryStatuses = repositoryStatuses;
		this.institutionalCertifications = institutionalCertifications;
		this.submissionTitle = submissionTitle;
		this.subprojectEligibleFlag = subprojectEligibleFlag;
		
	}

	@Id
	@SequenceGenerator(name="project_seq_gen", sequenceName="PROJ_SEQ", allocationSize=1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "project_seq_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "PROJECT_IDENTIFIER_NUM", length = 120)
	public String getProjectIdentifierNum() {
		return this.projectIdentifierNum;
	}

	public void setProjectIdentifierNum(String projectIdentifierNum) {
		this.projectIdentifierNum = projectIdentifierNum;
	}


	@Column(name = "DOC_ABBREVIATION", length = 120)
	public String getDocAbbreviation() {
		return this.docAbbreviation;
	}

	public void setDocAbbreviation(String docAbbreviation) {
		this.docAbbreviation = docAbbreviation;
	}

	@Column(name = "PROGRAM_BRANCH", length = 120)
	public String getProgramBranch() {
		return this.programBranch;
	}

	public void setProgramBranch(String programBranch) {
		this.programBranch = programBranch;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SCI_REV_APPROVAL_RCVD_DATE", length = 7)
	public Date getSciRevApprovalRcvdDate() {
		return this.sciRevApprovalRcvdDate;
	}

	public void setSciRevApprovalRcvdDate(Date sciRevApprovalRcvdDate) {
		this.sciRevApprovalRcvdDate = sciRevApprovalRcvdDate;
	}

	@Column(name = "PARENT_ACCESSION_NUM", length = 120)
	public String getParentAccessionNum() {
		return this.parentAccessionNum;
	}

	public void setParentAccessionNum(String parentAccessionNum) {
		this.parentAccessionNum = parentAccessionNum;
	}

	@Column(name = "COMMENTS", length = 4000)
	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	@Column(name = "PLAN_COMMENTS", length = 4000)
	public String getPlanComments() {
		return this.planComments;
	}

	public void setPlanComments(String planComments) {
		this.planComments = planComments;
	}
	
	@Column(name = "BSI_COMMENTS", length = 4000)
	public String getBsiComments() {
		return this.bsiComments;
	}

	public void setBsiComments(String bsiComments) {
		this.bsiComments = bsiComments;
	}
	
	@Column(name = "BSI_REVIEWED_ID", precision = 10, scale = 0)
	public Long getBsiReviewedId() {
		return this.bsiReviewedId;
	}

	public void setBsiReviewedId(Long bsiReviewedId) {
		this.bsiReviewedId = bsiReviewedId;
	}

	@Column(name = "VERSION_NUM", nullable = false, precision = 10, scale = 0)
	public Long getVersionNum() {
		return this.versionNum;
	}

	public void setVersionNum(Long versionNum) {
		this.versionNum = versionNum;
	}

	@Column(name = "CREATED_BY", nullable = false, length = 120)
	public String getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	@Column(name = "LAST_CHANGED_BY", length = 120)
	public String getLastChangedBy() {
		return this.lastChangedBy;
	}

	public void setLastChangedBy(String lastChangedBy) {
		this.lastChangedBy = lastChangedBy;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CREATED_BY", nullable=true, insertable=false, updatable=false)
	public NedPerson getCreatedByPerson() {
		return this.createdByPerson;
	}
	
	public void setCreatedByPerson(NedPerson person) {
		this.createdByPerson = person;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LAST_CHANGED_BY", nullable=true, insertable=false, updatable=false)
	public NedPerson getLastChangedByPerson() {
		return this.lastChangedByPerson;
	}
	
	public void setLastChangedByPerson(NedPerson person) {
		this.lastChangedByPerson = person;
	}
	
	
	@Transient
	public String getUpdatedBy() {
		//If lastChangedBy present return that info
		if(lastChangedBy != null) {
			try {
				return getLastChangedByPerson().getFullName();
			} catch (Exception e) {
				//Person may be left, so return the stored user id
				return lastChangedBy;
			}
		}
		
		//Else get createdBy info
		try {
			return getCreatedByPerson().getFullName();
		} catch (Exception e) {
		
		return createdBy;
		}
	}
	
	@Column(name = "SUBPROJECT_FLAG", length = 4)
	public String getSubprojectFlag() {
		return this.subprojectFlag;
	}

	public void setSubprojectFlag(String subprojectFlag) {
		this.subprojectFlag = subprojectFlag;
	}

	@Column(name = "PARENT_PROJECT_ID", precision = 10, scale = 0)
	public Long getParentProjectId() {
		return this.parentProjectId;
	}

	public void setParentProjectId(Long parentProjectId) {
		this.parentProjectId = parentProjectId;
	}

	@Column(name = "LATEST_VERSION_FLAG", length = 4)
	public String getLatestVersionFlag() {
		return this.latestVersionFlag;
	}

	public void setLatestVersionFlag(String latestVersionFlag) {
		this.latestVersionFlag = latestVersionFlag;
	}

	
	@Column(name = "PROJECT_GROUP_ID", precision = 10, scale = 0)
	public Long getProjectGroupId() {
		return this.projectGroupId;
	}

	public void setProjectGroupId(Long projectGroupId) {
		this.projectGroupId = projectGroupId;
	}

	@Column(name = "SUBMISSION_REASON_ID", nullable = false, precision = 10, scale = 0)
	public Long getSubmissionReasonId() {
		return this.submissionReasonId;
	}

	public void setSubmissionReasonId(Long submissionReasonId) {
		this.submissionReasonId = submissionReasonId;
	}

	@Column(name = "IC_COMPLETE_FLAG", length = 1)
	public String getCertificationCompleteFlag() {
		return this.certificationCompleteFlag;
	}

	public void setCertificationCompleteFlag(String certificationCompleteFlag) {
		this.certificationCompleteFlag = certificationCompleteFlag;
	}

	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", length = 7)
	public Date getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_CHANGED_DATE", length = 7)
	public Date getLastChangedDate() {
		return lastChangedDate;
	}

	public void setLastChangedDate(Date lastChangedDate) {
		this.lastChangedDate = lastChangedDate;
	}
	
	@Transient
	public Date getUpdatedDate() {
		if(lastChangedDate != null) {
			return lastChangedDate;
		}
		
		return createdDate;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "project", orphanRemoval = true)
	@OrderBy("createdDate DESC")
	public List<PageStatus> getPageStatuses() {
		return this.pageStatuses;
	}

	public void setPageStatuses(List<PageStatus> pageStatuses) {
		this.pageStatuses = pageStatuses;
	}
	
	
	public PageStatus getPageStatus(String pageCode) {
		Iterator<PageStatus> statuses = getPageStatuses().iterator();
		while(statuses.hasNext()) {
		    PageStatus pageStatus = statuses.next();
			if(pageStatus.getPage().getCode().equals(pageCode)) {
				return pageStatus;
			}
		}
		
		return null;
	}

	@Transient 
	public Set<Document> getDocuments() {
		return this.documents;
	}

	public void setDocuments(Set<Document> documents) {
		this.documents = documents;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "ANTICIPATED_SUBMISSION_DATE", length = 7)
	public Date getAnticipatedSubmissionDate() {
		return anticipatedSubmissionDate;
	}

	public void setAnticipatedSubmissionDate(Date anticipatedSubmissionDate) {
		this.anticipatedSubmissionDate = anticipatedSubmissionDate;
	}
	
	@Column(name = "PROJECT_SUBMISSION_TITLE", length = 100)
	public String getSubmissionTitle() {
		return submissionTitle;
	}

	public void setSubmissionTitle(String submissionTitle) {
		this.submissionTitle = submissionTitle;
	}

	@Column(name = "SUBPROJECT_ELIGIBLE_FLAG", length = 4)
	public String getSubprojectEligibleFlag() {
		return this.subprojectEligibleFlag;
	}

	public void setSubprojectEligibleFlag(String subprojectEligibleFlag) {
		this.subprojectEligibleFlag = subprojectEligibleFlag;
	}
	
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "DATA_SHARING_EXCEP_STATUS_ID")
	public Lookup getDataSharingExcepStatus() {
		return dataSharingExcepStatus;
	}
	
	
	/**
	 * @param dataSharingExcepStatus the dataSharingExcepStatus to set
	 */
	public void setDataSharingExcepStatus(Lookup dataSharingExcepStatus) {
		this.dataSharingExcepStatus = dataSharingExcepStatus;
	}
	

	@ManyToMany(cascade = CascadeType.MERGE, mappedBy="projects")
	public Set<PlanAnswerSelection> getPlanAnswerSelections() {
		return this.planAnswerSelections;
	}

	public void setPlanAnswerSelections(Set<PlanAnswerSelection> planAnswerSelections) {
		this.planAnswerSelections = planAnswerSelections;
	}
	

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "project", orphanRemoval = true)
	public List<ProjectGrantContract> getProjectGrantsContracts() {
		return this.projectGrantsContracts;
	}

	public void setProjectGrantsContracts(List<ProjectGrantContract> projectGrantsContracts) {
		this.projectGrantsContracts = projectGrantsContracts;
	}
	
	public void addProjectGrantContract(ProjectGrantContract projectGrantContract) {
		projectGrantsContracts.add(projectGrantContract);
	}
	
	@Transient
	public void removeAssociatedGrants(){
		Iterator<ProjectGrantContract> iterator = projectGrantsContracts.iterator();
		while(iterator.hasNext()) {
			ProjectGrantContract grantContract = iterator.next();
			if(ApplicationConstants.FLAG_NO.equals(grantContract.getPrimaryGrantContractFlag())){
				iterator.remove();
				break;
			}
		}
	}
	
	@Transient
	public void removePrimaryGrant(String grantContractType) {
		
		Iterator<ProjectGrantContract> iterator = projectGrantsContracts.iterator();
		while(iterator.hasNext()) {
			ProjectGrantContract grantContract = iterator.next();
			if(ApplicationConstants.FLAG_YES.equals(grantContract.getPrimaryGrantContractFlag())
					&& grantContractType.equals(grantContract.getGrantContractType())){
				iterator.remove();
				break;
			}
		}
	}
	
	@Transient
	public ProjectGrantContract getPrimaryGrant(String grantContractType) {
		
		for(ProjectGrantContract grantContract: projectGrantsContracts) {
			if(ApplicationConstants.FLAG_YES.equals(grantContract.getPrimaryGrantContractFlag())
					&& grantContractType.equals(grantContract.getGrantContractType())){
				return grantContract;
			}
		}
		return null;
	}
	
	
	@Transient
	public void setPrimaryGrant(String grantContractType, ProjectGrantContract projectGrantContract) {
		removePrimaryGrant(grantContractType);
		addProjectGrantContract(projectGrantContract);
	}

	
	
	@Transient
	public List<ProjectGrantContract> getAssociatedGrants() {
		List<ProjectGrantContract> associatedGrants=new ArrayList<ProjectGrantContract>();
		for(ProjectGrantContract grantContract: projectGrantsContracts) {
			if(grantContract.getGrantContractNum() !=null) {
			if(ApplicationConstants.FLAG_NO.equals(grantContract.getPrimaryGrantContractFlag())){
				associatedGrants.add(grantContract);
				}
			}
		}
		return associatedGrants;
	}

	@Transient
	public void setAssociatedGrants(List<ProjectGrantContract> associatedGrants){
		removeAssociatedGrants();
		for(ProjectGrantContract grantContract:associatedGrants){
			grantContract.setPrimaryGrantContractFlag("N");
		addProjectGrantContract(grantContract);
		}
	}
	
	
	@Transient
	public String getGrantSelection() {
		
		if(getPrimaryGrant(ApplicationConstants.GRANT_CONTRACT_TYPE_EXTRAMURAL) != null) {
			if(getPrimaryGrant(ApplicationConstants.GRANT_CONTRACT_TYPE_INTRAMURAL) != null) {
				return ApplicationConstants.GRANT_CONTRACT_TYPE_BOTH;
			} else {
				return ApplicationConstants.GRANT_CONTRACT_TYPE_EXTRAMURAL;
			}
		}
		
		return ApplicationConstants.GRANT_CONTRACT_TYPE_INTRAMURAL;
	}
	
	
	@Transient
	public PlanAnswerSelection getPlanAnswerSelectionById(Long id) {
		for(PlanAnswerSelection sel: getPlanAnswerSelections()) {
			if(sel.getId().longValue() == id.longValue())
				return sel;
		}
		return null;
	}
	
	@Transient
	public PlanAnswerSelection getPlanAnswerSelectionByAnswerId(Long id) {
		for(PlanAnswerSelection sel: getPlanAnswerSelections()) {
			if(sel.getPlanQuestionsAnswer().getId().longValue() == id.longValue())
				return sel;
		}
		return null;
	}
	
	@Transient
	public PlanAnswerSelection getPlanAnswerSelectionByAnswerIdAndText(Long id, String other) {
		for(PlanAnswerSelection sel: getPlanAnswerSelections()) {
			if(StringUtils.isEmpty(other) && sel.getPlanQuestionsAnswer().getId().longValue() == id.longValue()) {
				return sel;
			}
			if(StringUtils.isNotEmpty(other) && sel.getPlanQuestionsAnswer().getId().longValue() == id.longValue()
					&& StringUtils.equals(sel.getOtherText(), other)) {
				return sel;
			}
		}
		return null;
	}
	
	@Transient
	public Set<PlanAnswerSelection> getPlanAnswerSelectionByQuestionId(Long id) {
		Set<PlanAnswerSelection> set = new HashSet<PlanAnswerSelection>();
		for(PlanAnswerSelection sel: getPlanAnswerSelections()) {
			if(sel.getPlanQuestionsAnswer().getQuestionId().longValue() == id.longValue())
				set.add(sel);
		}
		return set;
	}
	
	@Transient
	public List<RepositoryStatus> getRepositoryStatuses() {
		return this.repositoryStatuses;
	}

	public void setRepositoryStatuses(List<RepositoryStatus> repositoryStatuses) {
		this.repositoryStatuses = repositoryStatuses;
	}

	@ManyToMany
	@JoinTable(name="projects_ic_mapping_t", joinColumns=@JoinColumn(name="project_id"), inverseJoinColumns=@JoinColumn(name="certification_id"))	
	public List<InstitutionalCertification> getInstitutionalCertifications() {
		return this.institutionalCertifications;
	}

	public void setInstitutionalCertifications(List<InstitutionalCertification> institutionalCertifications) {
		this.institutionalCertifications = institutionalCertifications;
	}
	
	
	@Formula(value="(SELECT count(*) FROM projects_t p WHERE p.parent_project_id = id AND p.latest_version_flag = 'Y')")
    public Long getSubprojectCount() {
		return subprojectCount;
	}
	
	public void setSubprojectCount(Long subprojectCount) {
		this.subprojectCount = subprojectCount;
	}
	
	@Formula(value="(SELECT count(*) FROM repository_statuses_t r WHERE r.project_id = id)")
    public Long getRepoCount() {
		return repoCount;
	}
	
	public void setRepoCount(Long repoCount) {
		this.repoCount = repoCount;
	}

	
	@Transient
	public Project getParent() {
		return parent;
	}

	/**
	 * @param parent the parent to set
	 */
	public void setParent(Project parent) {
		this.parent = parent;
	}

	@Column(name = "DATA_LINK_FLAG", nullable = false, length = 1)
	public String getDataLinkFlag() {
		return dataLinkFlag;
	}

	
	public void setDataLinkFlag(String dataLinkFlag) {
		this.dataLinkFlag = dataLinkFlag;
	}

}
