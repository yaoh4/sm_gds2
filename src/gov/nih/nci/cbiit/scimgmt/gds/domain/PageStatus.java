package gov.nih.nci.cbiit.scimgmt.gds.domain;
// Generated Mar 4, 2016 12:46:29 PM by Hibernate Tools 4.0.0

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.apache.commons.lang3.StringUtils;

/**
 * StatusHistory generated by hbm2java
 */
@Entity
@Table(name = "PAGE_STATUSES_T")
public class PageStatus implements java.io.Serializable {

	private Long id;
	private Lookup status;
	private Lookup page;
	private Project project;
	private String createdBy;
	private String lastChangedBy;
	private Date createdDate;
	private Date lastChangedDate;
	
	private NedPerson createdByPerson;
	private NedPerson lastChangedByPerson;

	public PageStatus() {
	}


	public PageStatus(Lookup status, Lookup page, Project project, String createdBy, Date createdDate) {
		
		this.status = status;
		this.page = page;
		this.project = project;
		this.createdBy = createdBy;
		this.createdDate = createdDate;
	}
	
	

	@Id
	@SequenceGenerator(name="pst_seq_gen", sequenceName="PST_SEQ", allocationSize=1)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "pst_seq_gen")
	@Column(name = "ID", unique = true, nullable = false, precision = 10, scale = 0)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "STATUS_ID", nullable = false)
	public Lookup getStatus() {
		return this.status;
	}

	public void setStatus(Lookup status) {
		this.status = status;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PAGE_ID", nullable = false)
	public Lookup getPage() {
		return this.page;
	}

	public void setPage(Lookup page) {
		this.page = page;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "PROJECT_ID", nullable = false)
	public Project getProject() {
		return this.project;
	}

	public void setProject(Project project) {
		this.project = project;
	}


	@Column(name = "CREATED_BY", length = 120)
	public String getCreatedBy() {
		
		return this.createdBy;
		
	}

	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}


	@Column(name = "LAST_CHANGED_BY", length = 120)
	public String getLastChangedBy() {
		return this.lastChangedBy;
	}

	public void setLastChangedBy(String lastChangedBy) {
		this.lastChangedBy = lastChangedBy;
	}
	
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "CREATED_BY", nullable=true, insertable=false, updatable=false)
	public NedPerson getCreatedByPerson() {
		return this.createdByPerson;
	}
	
	public void setCreatedByPerson(NedPerson person) {
		this.createdByPerson = person;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "LAST_CHANGED_BY", nullable=true, insertable=false, updatable=false)
	public NedPerson getLastChangedByPerson() {
		return this.lastChangedByPerson;
	}
	
	public void setLastChangedByPerson(NedPerson person) {
		this.lastChangedByPerson = person;
	}
	
	
	@Transient
	public String getUpdatedBy() {
		//If lastChangedBy present return that info
		if(lastChangedBy != null) {
			try {
				if(lastChangedBy.equalsIgnoreCase("GDS")) {
					return "";
				}
				else {
				return getLastChangedByPerson().getFullName();
				}
			} catch (Exception e) {
				//Person may be left, so return the stored user id
				return lastChangedBy;
			}
		}
		
		//Else get createdBy info
		try {
			if(createdBy.equalsIgnoreCase("GDS")) {
				return "";
			}
			else {
			return getCreatedByPerson().getFullName();
			}
		} catch (Exception e) {
		
		return createdBy;
		}
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATED_DATE", length = 7)
	public Date getCreatedDate() {
		return createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LAST_CHANGED_DATE", length = 7)
	public Date getLastChangedDate() {
		return lastChangedDate;
	}

	public void setLastChangedDate(Date lastChangedDate) {
		this.lastChangedDate = lastChangedDate;
	}
	
	@Transient
	public Date getUpdatedDate() {
		
		if(StringUtils.isEmpty(getUpdatedBy())) {
			
			return null;
		} else {
			
		if(lastChangedDate != null) {
			return lastChangedDate;
		}
		
		return createdDate;
		}
	}

}
