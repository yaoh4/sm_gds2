package gov.nih.nci.cbiit.scimgmt.gds.actions;
import java.util.ArrayList;import java.util.Date;import java.util.List;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.junit.Assert;import org.junit.Test;import org.junit.runner.RunWith;import org.mockito.Mockito;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.test.context.ContextConfiguration;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.transaction.annotation.Transactional;import gov.nih.nci.cbiit.scimgmt.gds.constants.ApplicationConstants;import gov.nih.nci.cbiit.scimgmt.gds.domain.Lookup;import gov.nih.nci.cbiit.scimgmt.gds.domain.PageStatus;import gov.nih.nci.cbiit.scimgmt.gds.domain.Project;import gov.nih.nci.cbiit.scimgmt.gds.domain.ProjectsVw;import gov.nih.nci.cbiit.scimgmt.gds.services.LookupService;import gov.nih.nci.cbiit.scimgmt.gds.services.ManageProjectService;import net.sf.ehcache.Cache;import net.sf.ehcache.CacheManager;
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration({"../applicationContext.xml"})
public class ManageSubmissionTest {	static Logger logger = LogManager.getLogger(ManageSubmissionTest.class);		Project project;		@Autowired	LookupService lookupService;		@Test	@Transactional	public void testGetProjectStatusCode(){				//CacheManager singletonManager = CacheManager.create();		//Cache memoryOnlyCache = new Cache("lookupLists", 5000, false, true, 5, 2);		//singletonManager.addCache(memoryOnlyCache);		System.out.println("Starting junit for ManageSubmission");		Project project = new Project();		project.setId(1L);		ProjectsVw projectsVw = new ProjectsVw();		projectsVw.setId(1L);		projectsVw.setSubprojectFlag(ApplicationConstants.FLAG_NO);		ManageProjectService manageProjectServiceMock = Mockito.mock(ManageProjectService.class);		Mockito.when(manageProjectServiceMock.findProjectsVwById(1L)).thenReturn(projectsVw);		System.out.println("Setup mock for manageProjectService: ");				ManageSubmission manageSubmission = new ManageSubmission();		manageSubmission.manageProjectService = manageProjectServiceMock;		//Test case - 1: If DB has no rows, return INPROGRESS		String projectStatus = manageSubmission.getProjectStatusCode(project.getId());		System.out.println("projectStatus for test 1: " + projectStatus);		Assert.assertEquals(ApplicationConstants.PAGE_STATUS_CODE_IN_PROGRESS, projectStatus);				//Test case 2: If not sub-project, return INPROGRESS, if all rows except GDSPlan info are COMPLETED				projectsVw.setIcPageStatusCode(ApplicationConstants.PAGE_STATUS_CODE_COMPLETED);		projectsVw.setBsiPageStatusCode(ApplicationConstants.PAGE_STATUS_CODE_COMPLETED);		projectsVw.setRepositoryPageStatusCode(ApplicationConstants.PAGE_STATUS_CODE_COMPLETED);		projectsVw.setSubprojectFlag(ApplicationConstants.FLAG_NO);		projectStatus = manageSubmission.getProjectStatusCode(project.getId());		System.out.println("projectStatus for test 2: " + projectStatus);				Assert.assertEquals(ApplicationConstants.PAGE_STATUS_CODE_IN_PROGRESS, projectStatus);				//Test case3: If subproject, return COMPLETED, if all rows except GDSPlan info are COMPLETED		projectsVw.setSubprojectFlag(ApplicationConstants.FLAG_YES);		projectStatus = manageSubmission.getProjectStatusCode(project.getId());		Assert.assertEquals(ApplicationConstants.PAGE_STATUS_CODE_COMPLETED, projectStatus);		System.out.println("projectStatus for test 3: " + projectStatus);			}}
